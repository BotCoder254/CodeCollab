require('dotenv').config();































const express = require('express');































const http = require('http');































const socketIO = require('socket.io');































const path = require('path');































const connectDB = require('./config/db');































const expressLayouts = require('express-ejs-layouts');































const session = require('express-session');































const MongoStore = require('connect-mongo');































const auth = require('./middleware/auth');































































const app = express();































const server = http.createServer(app);































const io = socketIO(server);































































// Connect to MongoDB































connectDB();































































// Session configuration































app.use(session({































    secret: process.env.JWT_SECRET,































    resave: false,































    saveUninitialized: false,































    store: MongoStore.create({































        mongoUrl: process.env.MONGODB_URI,































        collectionName: 'sessions'































    }),































    cookie: {































        maxAge: 1000 * 60 * 60 * 24 // 1 day































    }































}));































































// Middleware































app.use(express.json());































app.use(express.urlencoded({ extended: true }));































app.use(express.static(path.join(__dirname, 'public')));































































// EJS setup































app.set('views', path.join(__dirname, 'views'));































app.set('view engine', 'ejs');































app.set('layout', 'layout');































app.use(expressLayouts);































































// Make io accessible to our router































app.use((req, res, next) => {































    req.io = io;































    next();































});































































// Routes































const authRoutes = require('./routes/auth');































const projectRoutes = require('./routes/projects');































const fileRoutes = require('./routes/files');































const dashboardRoutes = require('./routes/dashboard');































const collaborationRoutes = require('./routes/collaborations');































const templateRoutes = require('./routes/templates');































































// Apply routes with middleware































app.use('/auth', authRoutes);































app.use('/dashboard', auth, dashboardRoutes);































app.use('/projects', auth, projectRoutes);































app.use('/files', auth, fileRoutes);































app.use('/collaborations', auth, collaborationRoutes);































app.use('/templates', auth, templateRoutes);































































// Home route































app.get('/', (req, res) => {































    if (req.session.token) {































        res.redirect('/dashboard');































    } else {































        res.render('landing', { 































            title: 'Welcome to CodeCollab',































            layout: 'layout'





































        });































    }































});































































// Socket.IO connection handling































io.on('connection', (socket) => {































    console.log('New client connected');































































    socket.on('join-room', (roomId) => {































        socket.join(roomId);































        console.log(`Client joined room: ${roomId}`);































    });































































    socket.on('cursor-move', (data) => {































        socket.to(data.roomId).emit('cursor-update', {































            userId: data.userId,































            position: data.position































        });































    });































































    socket.on('code-change', (data) => {































        socket.to(data.roomId).emit('code-update', {































            content: data.content,































            userId: data.userId































        });































    });































































    socket.on('disconnect', () => {































        console.log('Client disconnected');































    });































});































































// Error handling middleware































app.use((err, req, res, next) => {































    console.error(err.stack);































    res.status(500).render('error', { 































        title: 'Server Error',































        error: {































            status: 500,































            message: 'Something went wrong!'































        }































    });































});































































// 404 handler































app.use((req, res) => {































    res.status(404).render('404', { 































        title: 'Page Not Found',































        layout: 'layout'  // Explicitly specify the layout































    });































});





























































const fs = require('fs').promises;































async function checkDirectoryStructure() {































    const directories = [































        'views',































        'views/auth',































        'views/pages',































        'views/components',































        'public',































        'public/js',































        'public/css',































        'public/images'































    ];































    for (const dir of directories) {































        try {































            await fs.access(dir);































        } catch {































            await fs.mkdir(dir, { recursive: true });































            console.log(`Created directory: ${dir}`);































        }































    }































}































checkDirectoryStructure().then(() => {































    server.listen(PORT, () => console.log(`Server running on port ${PORT}`));































}).catch(err => {































    console.error('Failed to create directory structure:', err);































    process.exit(1);































});































































const PORT = process.env.PORT || 3000;































































module.exports = app;






























